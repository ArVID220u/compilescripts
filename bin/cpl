#!/usr/bin/env python3
from sys import argv
from sys import exit
import os

if len(argv) == 1:
    print('No arguments supplied. Type "cpl -h" for help.')
    exit()


if argv[1] == "-h":
    # display help
    print()
    print('cpl is a tool for easy compilation c++ files. The submitted files are compiled into one executable, with the same name as the first source file.')
    print()
    print('cpl [-h] [-o] [-g] [-d] filename(s)')
    print()
    print('Flags:')
    print('    -h: Help.')
    print('    -o: Compile with allc++ file. More specifically, do change "#include <bits/stdc++.h>" into "#include <allc++.h>" for compilation.')
    print('    -g: Compile for gdb debugging. The executable will be prefixed with "gdb".')
    print('    -d: Compile with the -D_GLIBCXX_DEBUG flag. Useful for segfaults. The executable will be prefixed with "d".')
    print('    -dh: Don\'t hide the warnings.')
    print('    -notsimon: Do not use Simon Lindholm\'s fancy flags.')
    print('    -O2: Use the O2 optimization.')
    exit()



# compile c++ file with same flags as kattis uses
# but first change the contents of the file: if the first line includes bits/stdc++.h, then change it to the precompiled allc++.h, if not the flag -o (original) is found
filenames = []
name = ""
original = True
gdb = False
debug_flag = False
simon = True
should_hide_warnings = True
o2 = False
c = 0
for i in range(1,len(argv)):
    if argv[i] == "-o":
        original = False
        continue
    if argv[i] == "-g":
        gdb = True
        continue
    if argv[i] == "-dh":
        should_hide_warnings = False
        continue
    if argv[i] == "-d":
        debug_flag = True
        continue
    if argv[i] == "-notsimon":
        simon = False
        continue
    if argv[i] == "-O2":
        o2 = True
        continue
    thisname = argv[i]
    thisfilename = thisname
    if not thisfilename.endswith(".cpp"):
        thisfilename += ".cpp"
    else:
        thisname = thisname[:-4]
    if c == 0:
        name = thisname
    filenames.append(thisfilename)
    c += 1

hide_warnings = ""
if should_hide_warnings:
    # don't show lots of warnings
    hide_warnings = "2>&1 >/dev/null | grep -v -e '^/var/folders/*' -e '^[[:space:]]*\.section __TEXT,__textcoal_nt,coalesced,pure_instructions' -e '^[[:space:]]*\^[[:space:]]*~*'"

new_contents = []
for index, filename in enumerate(filenames):
    with open(filename, "r") as f:
        contents = f.read()
        if contents.startswith("#include <bits/stdc++.h>") and not original:
            hej = contents.splitlines(True)
            hej[0] = "#include <allc++.h>\n"
            new_contents.append(hej)
            tempname = filename[:-4] + "allc++"
            tempokay = True
            while tempokay:
                try:
                    sf = open(tempname + ".cpp","r")
                    tempname = tempname + "x"
                    sf.close()
                except:
                    tempokay = False
            filenames[index] = tempname + ".cpp"
        elif contents.startswith("#include <bits/stdc++.h>") and original:
            new_contents.append("hej")

if len(new_contents) > 0 and not original:
    print('Changing "#include <bits/stdc++.h>" into "#include <allc++.h>" for faster compiling. Use flag -o (original) to prevent this behavior (for example, if you\'ve recently updated gcc, and are experiencing strange results).')
    for index, filename in enumerate(filenames):
        if index < len(new_contents):
            with open(filename, "w") as f:
                f.writelines(new_contents[index])
elif original and len(new_contents) > 0:
    #print('Not changing "#include <bits/stdc++.h>" into "#include <allc++.h>"; keeping ' + filename + ' unchanged.')
    bbbbbbbbbbb = "hej"

if gdb:
    print("Compiling with debugging option \"-g\" into gdb" + name + ".")
if debug_flag:
    print("Compiling with the -D_GLIBCXX_DEBUG flag into d-" + name + ".")

command = "g++-5 -o " + name
for filename in filenames:
    command += " " + filename
command += " -std=c++11"
if simon:
    command += " -fsanitize=address,undefined -Wall -Wconversion"
if o2:
    command += " -O2"
command += " " + hide_warnings
if (not gdb) and (not debug_flag):
    os.system(command)
if gdb:
    dname = "gdb" + name
    command = "g++-5 -o " + dname
    for filename in filenames:
        ffff = filename
        if ffff.endswith("allc++.cpp"):
            ffff = filename[:-10]
            ffff += ".cpp"
        command += " " + ffff
    command += " -std=c++11"
    command += " -fsanitize=address,undefined -Wall -Wconversion"
    command += " -g"
    if o2:
        command += " -O2"
    command += " " + hide_warnings
    os.system(command)
if debug_flag:
    command = "g++-5 -o " + "d" + name
    for filename in filenames:
        command += " " + filename
    command += " -std=c++11"
    command += " -D_GLIBCXX_DEBUG=1"
    if simon:
        command += " -fsanitize=address,undefined -Wall -Wconversion"
    if o2:
        command += " -O2"
    command += " " + hide_warnings
    os.system(command)
if len(new_contents) > 0 and not original:
    # remove temporary file
    for index, filename in enumerate(filenames):
        if index < len(new_contents):
            os.remove(filename)
